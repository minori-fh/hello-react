{"version":3,"sources":["components/CTAButton/CTAButton.js","components/LinkButton/LinkButton.js","components/MIButton/MIButton.js","components/Links/Links.js","components/HomePage/HomePage.js","pages/Home/Home.js","pages/Links/Links.js","routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["CTAButton","props","onClick","cta","LinkButton","links","MIButton","mi","Links","HomePage","children","Home","state","gotoCTA","bind","gotoLinks","gotoMI","console","log","this","setState","edit","Component","Routes","exact","path","component","App","ONRouting","basename","process","home","MI","CTAs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAMeA,EAJG,SAACC,GAAD,OACd,4BAAQC,QAASD,EAAME,KAAvB,gBCGWC,EAJI,SAACH,GAAD,OACf,4BAAQC,QAASD,EAAMI,OAAvB,YCGWC,EAJE,SAACL,GAAD,OACb,4BAAQC,QAASD,EAAMM,IAAvB,gBCGWC,EAJD,SAACP,GAAD,OACV,kDCOWQ,EARE,SAACR,GAAD,OACb,6BACI,6BACKA,EAAMS,YC+DJC,E,YA1DX,WAAYV,GAAO,IAAD,8BACd,4CAAMA,KACDW,MAAQ,CACTP,OAAO,EACPE,IAAI,EACJJ,KAAK,GAET,EAAKU,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,UAAY,EAAKF,QAAQC,KAAb,gBACjB,EAAKE,OAAS,EAAKH,QAAQC,KAAb,gBATA,E,uEAadG,QAAQC,IAAI,wBACZC,KAAKC,SAAS,CACVjB,KAAK,IAETc,QAAQC,IAAIC,KAAKP,MAAMT,O,kCAIvBc,QAAQC,IAAI,0BAEZC,KAAKC,SAAS,CACVf,OAAO,IAEXY,QAAQC,IAAIC,KAAKP,MAAMP,S,+BAIvBY,QAAQC,IAAI,uBACZC,KAAKC,SAAS,CACVb,IAAI,IAGRU,QAAQC,IAAIC,KAAKP,MAAML,M,+BAIvB,OACI,6BACI,mDACA,kBAAC,EAAD,CAAWJ,IAAKgB,KAAKN,UACrB,kBAAC,EAAD,CAAYR,MAAOc,KAAKJ,YACxB,kBAAC,EAAD,CAAWR,GAAIY,KAAKH,SACxB,kBAAC,EAAD,KAEQG,KAAKP,MAAMS,KACX,kBAAC,EAAD,MAEA,8D,GApDDC,aCMJd,E,iLARP,OACI,kBAAC,EAAD,KACI,+D,GAJIc,aCuBLC,E,iLAZP,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,SAASC,UAAWlB,S,GALjCc,aCgCNK,E,YAlCb,WAAY1B,GAAO,IAAD,8BAChB,4CAAMA,KASR2B,UAAY,WACV,OACE,kBAAC,IAAD,CAAQC,SAAUC,gBAChB,6BACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOL,KAAK,IAAIC,UAAWH,SAdrC,EAAKX,MAAQ,CACXmB,MAAM,EACN1B,OAAO,EACP2B,IAAI,EACJC,MAAM,GANQ,E,sEAyBhB,OAAOd,KAAKP,MAAMmB,MAChB,KAAK,EAEL,QACE,OAAOZ,KAAKS,iB,GA9BFN,aCEEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dccda282.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CTAButton = (props) => (\r\n    <button onClick={props.cta}>CTA Library</button>\r\n);\r\n\r\nexport default CTAButton; ","import React from 'react';\r\n\r\nconst LinkButton = (props) => (\r\n    <button onClick={props.links}>Linking</button>\r\n);\r\n\r\nexport default LinkButton; ","import React from 'react';\r\n\r\nconst MIButton = (props) => (\r\n    <button onClick={props.mi}>Movable Ink</button>\r\n);\r\n\r\nexport default MIButton; ","import React from 'react';\r\n\r\nconst Links = (props) => (\r\n    <div>Welcome to LINKS</div>\r\n);\r\n\r\nexport default Links; ","import React from 'react';\r\n\r\nconst HomePage = (props) => (\r\n    <div>\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default HomePage; ","import React, {Component} from \"react\";\r\n\r\nimport CTAButton from '../../components/CTAButton/CTAButton'\r\nimport LinkButton from '../../components/LinkButton/LinkButton'\r\nimport MIButton from '../../components/MIButton/MIButton'\r\nimport Links from '../../components/Links/Links'\r\nimport HomePage from '../../components/HomePage/HomePage'\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            links: false,\r\n            mi: false,\r\n            cta: false,\r\n        }\r\n        this.gotoCTA = this.gotoCTA.bind(this)\r\n        this.gotoLinks = this.gotoCTA.bind(this)\r\n        this.gotoMI = this.gotoCTA.bind(this)\r\n    }\r\n\r\n    gotoCTA(){\r\n        console.log(\"hit the CTA function\")\r\n        this.setState({\r\n            cta: true\r\n        })\r\n        console.log(this.state.cta)\r\n    }\r\n\r\n    gotoLinks(){\r\n        console.log(\"hit the links function\")\r\n\r\n        this.setState({\r\n            links: true\r\n        })\r\n        console.log(this.state.links)\r\n    }\r\n\r\n    gotoMI(){\r\n        console.log(\"hit the mi function\")\r\n        this.setState({\r\n            mi: true\r\n        })\r\n\r\n        console.log(this.state.mi)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Welcome to DebTools</h1>\r\n                <CTAButton cta={this.gotoCTA}/>\r\n                <LinkButton links={this.gotoLinks}/>\r\n                <MIButton  mi={this.gotoMI}/>\r\n            <HomePage>\r\n                {\r\n                    this.state.edit ? \r\n                    <Links/>\r\n                    :\r\n                    <p>nothing to see here...yet</p>\r\n                }\r\n            </HomePage>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default Home;","import React, {Component} from \"react\";\r\n\r\nimport HomePage from '../../components/HomePage/HomePage'\r\n\r\nclass Links extends Component {\r\n    render(){\r\n        return(\r\n            <HomePage>\r\n                <h1>Welcome to the links page!</h1>\r\n            </HomePage>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Links;","import React, { Component } from 'react'; //allows us to utilize JSX \r\nimport { Route, Switch } from \"react-router-dom\"; //react-router-dom is a routing lib, we are using the Route and Switch components to tell the application which component to display for which routes\r\n\r\n\r\n//importing components to be used\r\nimport Home from '../pages/Home/Home';\r\nimport Links from '../pages/Links/Links';\r\n\r\n//react is made up of components which can be defined using 1.) functions 2.) classes \r\n//1. functional components - simpler, less code, not stateful\r\n//2. class components - longer, more code, but we can use states! \r\n\r\n//Below, we create the Class Component \"Routes\"\r\nclass Routes extends Component {\r\n    render(){\r\n        return(\r\n            <Switch>\r\n                <Route exact path=\"/\" component={Home}/>\r\n                <Route exact path=\"/links\" component={Links}/>\r\n                {/* <Route exact path=\"/MI\" component={MI}/>\r\n                <Route exact path=\"/CTA\" component={CTAs}/>\r\n                <Route exact path=\"*\" component={NoMatch}/> I like to have a * catch-all in case someone puts in a random path */}\r\n            </Switch>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Routes;","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// import routes\nimport Routes from './routes/Routes';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      home: true,\n      links: false,\n      MI: false,\n      CTAs: false,\n    }\n  }\n\n  ONRouting = () => {\n    return(\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <div>\n            <Switch>\n              <Route path=\"*\" component={Routes} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    )\n  }\n\n  render(){\n    switch(this.state.home){\n      case true:\n        return this.ONRouting()\n      default:\n        return this.ONRouting()\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}